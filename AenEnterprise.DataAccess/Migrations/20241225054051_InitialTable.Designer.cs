// <auto-generated />
using System;
using AenEnterprise.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AenEnterprise.DataAccess.Migrations
{
    [DbContext(typeof(AenEnterpriseDbContext))]
    [Migration("20241225054051_InitialTable")]
    partial class InitialTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReconciliationId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("VendorInvoiceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ReconciliationId");

                    b.HasIndex("VendorInvoiceId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.Reconciliation", b =>
                {
                    b.Property<int>("ReconciliationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReconciliationId"));

                    b.Property<DateTime>("ReconciliationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ReconciliationId");

                    b.ToTable("Reconciliations");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.VendorInvoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("InvoiceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("VendorInvoices");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.CreditMemo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("CreditMemos");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Dhaka",
                            Balance = 200.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(924),
                            Description = "This is Plate Customer",
                            MobileNo = "01887969696",
                            Name = "Alam"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Dhaka",
                            Balance = 1000.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(951),
                            Description = "This is Brass Customer",
                            MobileNo = "01887969696",
                            Name = "Shamim Enterprise"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Chittagong",
                            Balance = 500.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(955),
                            Description = "This is Plate Customer",
                            MobileNo = "01887969696",
                            Name = "Shahab Uddin"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Dhaka",
                            Balance = 500.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(957),
                            Description = "This is Abdul Matin's Customer",
                            MobileNo = "01887969696",
                            Name = "Abdul Matin"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Dhaka",
                            Balance = 4100.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(960),
                            Description = "This is Abdur Rahman's Customer",
                            MobileNo = "01887969696",
                            Name = "Abdur Rahman"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Dhaka",
                            Balance = 400.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(963),
                            Description = "This is Abdus Salam's Customer",
                            MobileNo = "01887969696",
                            Name = "Abdus Salam"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Dhaka",
                            Balance = 3300.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(965),
                            Description = "This is Abul Bashar's Customer",
                            MobileNo = "01887969696",
                            Name = "Abul Bashar"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Dhaka",
                            Balance = 2200.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(968),
                            Description = "This is Abul Kashem's Customer",
                            MobileNo = "01887969696",
                            Name = "Abul Kashem"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Dhaka",
                            Balance = 1100.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1059),
                            Description = "This is Abutaher's Customer",
                            MobileNo = "01887969696",
                            Name = "Abutaher"
                        },
                        new
                        {
                            Id = 10,
                            Address = "Dhaka",
                            Balance = 4500.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1063),
                            Description = "This is Agrabad Office's Customer",
                            MobileNo = "01887969696",
                            Name = "Agrabad Office"
                        },
                        new
                        {
                            Id = 11,
                            Address = "Dhaka",
                            Balance = 600.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1066),
                            Description = "This is Akkas's Customer",
                            MobileNo = "01887969696",
                            Name = "Akkas"
                        },
                        new
                        {
                            Id = 12,
                            Address = "Dhaka",
                            Balance = 2000.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1068),
                            Description = "This is Al Madina's Customer",
                            MobileNo = "01887969696",
                            Name = "Al Madina"
                        },
                        new
                        {
                            Id = 13,
                            Address = "Dhaka",
                            Balance = 200.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1071),
                            Description = "This is Alamgir's Customer",
                            MobileNo = "01887969696",
                            Name = "Alamgir"
                        },
                        new
                        {
                            Id = 14,
                            Address = "Dhaka",
                            Balance = 800.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1074),
                            Description = "This is AR Enterprise's Customer",
                            MobileNo = "01887969696",
                            Name = "AR Enterprise"
                        },
                        new
                        {
                            Id = 15,
                            Address = "Dhaka",
                            Balance = 4500.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1076),
                            Description = "This is Ayub Khan's Customer",
                            MobileNo = "01887969696",
                            Name = "Ayub Khan"
                        },
                        new
                        {
                            Id = 16,
                            Address = "Dhaka",
                            Balance = 600.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1079),
                            Description = "This is AZ Brothers' Customer",
                            MobileNo = "01887969696",
                            Name = "AZ Brothers"
                        },
                        new
                        {
                            Id = 17,
                            Address = "Dhaka",
                            Balance = 200.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1081),
                            Description = "This is Bablu's Customer",
                            MobileNo = "01887969696",
                            Name = "Bablu"
                        },
                        new
                        {
                            Id = 18,
                            Address = "Dhaka",
                            Balance = 14000.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1084),
                            Description = "This is Bacha Meah's Customer",
                            MobileNo = "01887969696",
                            Name = "Bacha Meah"
                        },
                        new
                        {
                            Id = 19,
                            Address = "Dhaka",
                            Balance = 2200.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1087),
                            Description = "This is Bismillah's Customer",
                            MobileNo = "01887969696",
                            Name = "Bismillah"
                        },
                        new
                        {
                            Id = 20,
                            Address = "Dhaka",
                            Balance = 100.00m,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 28, DateTimeKind.Local).AddTicks(1089),
                            Description = "This is Dalehsar Iron's Customer",
                            MobileNo = "01887969696",
                            Name = "Dalehsar Iron"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.PaymentReceipt", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("PaymentAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("PaymentReceipts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("DeliveryOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DeliveryOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("DeliveryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DispatchAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DispatchQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullyApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("StatusId");

                    b.ToTable("DeliveryOrderItem");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatchItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DispatchAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DispatchOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("DispatchQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullyApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("VehicalEmptyWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("VehicalLoadWeight")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("VehicalNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DispatchOrderId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("StatusId");

                    b.ToTable("DispatchItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatcheOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DeliveryOrderId")
                        .HasColumnType("int");

                    b.Property<string>("DispatcheNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeliveryOrderId");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("DispatchOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("InvoiceNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("OutstandingAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BalanceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DeliveryAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DeliveryQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("InvoiceAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<decimal>("InvoiceQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullyApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyApproved")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.HasIndex("OrderItemId");

                    b.HasIndex("StatusId");

                    b.ToTable("InvoiceItem");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("DiscountPercent")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InvoicedAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InvoicedQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFullyApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPartiallyApproved")
                        .HasColumnType("bit");

                    b.Property<decimal>("NetAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("OrderItemNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SalesOrderId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SalesOrderId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UnitId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryPlane")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SalesOrderNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalesOrderStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderStatusId");

                    b.ToTable("SalesOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SalesOrderStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "CreateSalesOrder"
                        },
                        new
                        {
                            Id = 2,
                            Name = "PendingApprovalOrder"
                        },
                        new
                        {
                            Id = 3,
                            Name = "ApprovedSalesOrder"
                        },
                        new
                        {
                            Id = 4,
                            Name = "CreateInvoice"
                        },
                        new
                        {
                            Id = 5,
                            Name = "ApprovedInvoice"
                        },
                        new
                        {
                            Id = 6,
                            Name = "CreateDO"
                        },
                        new
                        {
                            Id = 7,
                            Name = "ApprovedDO"
                        },
                        new
                        {
                            Id = 8,
                            Name = "CreateDispatcheAndDone"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Reject"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Status");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Pending"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Approved"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Rejected"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountGroup", b =>
                {
                    b.Property<int>("AccountGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountGroupId"));

                    b.Property<string>("AccountCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("int");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.HasKey("AccountGroupId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("AccountGroups", (string)null);

                    b.HasData(
                        new
                        {
                            AccountGroupId = 1,
                            AccountCode = "CASH",
                            AccountName = "Cash in Hand",
                            AccountNumber = "1001",
                            AccountTypeId = 1,
                            Balance = 10000.00m,
                            BranchId = 1,
                            CompanyId = 1
                        },
                        new
                        {
                            AccountGroupId = 2,
                            AccountCode = "INV",
                            AccountName = "Inventory",
                            AccountNumber = "2001",
                            AccountTypeId = 2,
                            Balance = 50000.00m,
                            BranchId = 1,
                            CompanyId = 1
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Accounts representing company assets",
                            TypeName = "Asset"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Accounts representing company liabilities",
                            TypeName = "Liability"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Accounts representing owner's equity",
                            TypeName = "Equity"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Accounts representing company revenues",
                            TypeName = "Revenue"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Accounts representing company expenses",
                            TypeName = "Expense"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntry", b =>
                {
                    b.Property<int>("JournalEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryId"));

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("EntryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("JournalEntryNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JournalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Partner")
                        .HasColumnType("int");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("JournalEntryId");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("JournalEntries", (string)null);

                    b.HasData(
                        new
                        {
                            JournalEntryId = 1,
                            BranchId = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 35, DateTimeKind.Local).AddTicks(3113),
                            Description = "Opening balance for the company",
                            EntryDate = new DateTime(2023, 11, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JournalEntryNo = "JE20231101",
                            JournalName = "Opening Balance",
                            Partner = 0,
                            ReferenceNumber = "REF123",
                            TotalCredit = 0m,
                            TotalDebit = 0m
                        },
                        new
                        {
                            JournalEntryId = 2,
                            BranchId = 1,
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 35, DateTimeKind.Local).AddTicks(3120),
                            Description = "Purchase of raw materials",
                            EntryDate = new DateTime(2023, 11, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            JournalEntryNo = "JE20231102",
                            JournalName = "Purchase Entry",
                            Partner = 0,
                            ReferenceNumber = "REF124",
                            TotalCredit = 0m,
                            TotalDebit = 0m
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntryLine", b =>
                {
                    b.Property<int>("JournalEntryLineId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("JournalEntryLineId"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("CreditAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("DebitAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("JournalEntryId")
                        .HasColumnType("int");

                    b.HasKey("JournalEntryLineId");

                    b.HasIndex("AccountGroupId");

                    b.HasIndex("JournalEntryId");

                    b.ToTable("JournalEntryLines", (string)null);

                    b.HasData(
                        new
                        {
                            JournalEntryLineId = 1,
                            AccountGroupId = 1,
                            CreatedDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditAmount = 0.00m,
                            DebitAmount = 1000.00m,
                            Description = "Initial Journal Entry",
                            JournalEntryId = 1
                        },
                        new
                        {
                            JournalEntryLineId = 2,
                            AccountGroupId = 2,
                            CreatedDate = new DateTime(2024, 12, 25, 0, 0, 0, 0, DateTimeKind.Local),
                            CreditAmount = 500.00m,
                            DebitAmount = 0.00m,
                            Description = "Second Journal Entry",
                            JournalEntryId = 1
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.LedgerPosting", b =>
                {
                    b.Property<int>("LedgerPostingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LedgerPostingId"));

                    b.Property<int>("AccountGroupId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDebit")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PostingDate")
                        .HasColumnType("datetime2");

                    b.HasKey("LedgerPostingId");

                    b.HasIndex("AccountGroupId");

                    b.ToTable("LedgerPostings");

                    b.HasData(
                        new
                        {
                            LedgerPostingId = 1,
                            AccountGroupId = 1,
                            Amount = 5000m,
                            Description = "Ledger posting 1",
                            IsDebit = true,
                            PostingDate = new DateTime(2024, 12, 25, 11, 40, 50, 44, DateTimeKind.Local).AddTicks(905)
                        },
                        new
                        {
                            LedgerPostingId = 2,
                            AccountGroupId = 2,
                            Amount = 3000m,
                            Description = "Ledger posting 2",
                            IsDebit = false,
                            PostingDate = new DateTime(2024, 12, 25, 11, 40, 50, 44, DateTimeKind.Local).AddTicks(917)
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.TrialBalance", b =>
                {
                    b.Property<DateTime>("AsOfDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AsOfDate");

                    b.ToTable("TrialBalances", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.TrialBalanceLine", b =>
                {
                    b.Property<string>("AccountName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<decimal>("TotalCredit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalDebit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TrialBalanceAsOfDate")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountName");

                    b.HasIndex("TrialBalanceAsOfDate");

                    b.ToTable("TrialBalanceLines", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CustomerRef")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BankAccounts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.BlogCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("BlogCategories", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DatePosted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("PostId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.Post", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Branch", b =>
                {
                    b.Property<int>("BranchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BranchId"));

                    b.Property<string>("BranchAddress")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("BranchEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("BranchPhone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("OpeningDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("BranchId");

                    b.HasIndex("CompanyId");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            BranchId = 1,
                            BranchAddress = "456 Central Road, Dhaka, Bangladesh",
                            BranchEmail = "dhaka.branch@aenenterprise.com",
                            BranchName = "Dhaka Branch",
                            BranchPhone = "+880987654321",
                            City = "Dhaka",
                            CompanyId = 1,
                            CreatedDate = new DateTime(2024, 12, 25, 11, 40, 50, 61, DateTimeKind.Local).AddTicks(5524),
                            IsActive = true,
                            OpeningDate = new DateTime(2021, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PostalCode = "1205",
                            ProductionOrderId = 0,
                            State = "Dhaka Division"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Plate"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Brass"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AnnualRevenue")
                        .HasColumnType("decimal")
                        .HasColumnName("AnnualRevenue");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyAddress");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyEmail");

                    b.Property<string>("CompanyPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CompanyPhone");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Country");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("ExpiryDate");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("FullName");

                    b.Property<DateTime>("IncorporationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("IncorporationDate");

                    b.Property<string>("IndustryType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("IndustryType");

                    b.Property<string>("InvoiceAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InvoiceAddress");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit")
                        .HasColumnName("IsDeleted");

                    b.Property<bool>("IsMultipleWareHouse")
                        .HasColumnType("bit")
                        .HasColumnName("IsMultipleWareHouse");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("bit")
                        .HasColumnName("IsPrimary");

                    b.Property<bool>("IsPubliclyListed")
                        .HasColumnType("bit")
                        .HasColumnName("IsPubliclyListed");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("RegistrationNumber");

                    b.Property<string>("TaxIdentifier")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("TaxIdentifier");

                    b.Property<string>("VATAreaCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VATAreaCode");

                    b.Property<string>("VATCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("VATCode");

                    b.Property<string>("WebPageAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("WebPageAddress");

                    b.HasKey("Id");

                    b.ToTable("Companies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AnnualRevenue = 1000000.00m,
                            CompanyAddress = "123 Sample St",
                            CompanyEmail = "company@example.com",
                            CompanyPhone = "123-456-7890",
                            Country = "Sample Country",
                            CreatedDate = new DateTime(2019, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8274),
                            ExpiryDate = new DateTime(2029, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8276),
                            FullName = "Full Name",
                            IncorporationDate = new DateTime(2019, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8248),
                            IndustryType = "Sample Industry",
                            InvoiceAddress = "456 Invoice St",
                            IsDeleted = false,
                            IsMultipleWareHouse = true,
                            IsPrimary = true,
                            IsPubliclyListed = false,
                            Name = "Company B",
                            RegistrationNumber = "123456789",
                            TaxIdentifier = "TAX123",
                            VATAreaCode = "Area-123",
                            VATCode = "VAT-123",
                            WebPageAddress = "www.company.com"
                        },
                        new
                        {
                            Id = 2,
                            AnnualRevenue = 1000000.00m,
                            CompanyAddress = "123 Sample St",
                            CompanyEmail = "company@example.com",
                            CompanyPhone = "123-456-7890",
                            Country = "Sample Country",
                            CreatedDate = new DateTime(2019, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8291),
                            ExpiryDate = new DateTime(2029, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8292),
                            FullName = "Full Name",
                            IncorporationDate = new DateTime(2019, 12, 25, 11, 40, 50, 77, DateTimeKind.Local).AddTicks(8288),
                            IndustryType = "Sample Industry",
                            InvoiceAddress = "456 Invoice St",
                            IsDeleted = false,
                            IsMultipleWareHouse = true,
                            IsPrimary = true,
                            IsPubliclyListed = false,
                            Name = "Company A",
                            RegistrationNumber = "123488796",
                            TaxIdentifier = "TAX123",
                            VATAreaCode = "Area-123",
                            VATCode = "VAT-123",
                            WebPageAddress = "www.company.com"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.AdvancePayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AdvanceAgainst")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("PayrollId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ProposalDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("AdvancePayments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<TimeSpan>("CheckInTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("CheckOutTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("OverTimeHours")
                        .HasColumnType("time");

                    b.Property<int?>("PayrollId")
                        .HasColumnType("int");

                    b.Property<int?>("PiecesProduced")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("RegularHours")
                        .HasColumnType("time");

                    b.Property<string>("Remarks")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("WorkingHours")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("PayrollId");

                    b.ToTable("Attendances");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Benefits.Allowances", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Allowances");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Benefits.Benefit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("MonthlyCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Benefits");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.BenefitsAdministration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BenefitsAdministrations");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Departments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "IT"
                        },
                        new
                        {
                            Id = 2,
                            Name = "HR"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("ActualSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("AppointmentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HireStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("JobLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("TalentAcquisitionId")
                        .HasColumnType("int");

                    b.Property<string>("WorkingType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("TalentAcquisitionId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ActualSalary = 60000m,
                            Address = "Chittagong",
                            AppointmentType = "Parmanent",
                            BranchId = 1,
                            CompanyId = 1,
                            DepartmentId = 1,
                            Designation = "Driver",
                            HireDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireStatus = "Confirm",
                            JobLocation = "Chittagong",
                            Name = "Azam",
                            PaymentType = "Monthly",
                            Status = "Active",
                            WorkingType = "Full Time"
                        },
                        new
                        {
                            Id = 2,
                            ActualSalary = 60000m,
                            Address = "Chittagong",
                            AppointmentType = "Parmanent",
                            BranchId = 1,
                            CompanyId = 1,
                            DepartmentId = 1,
                            Designation = "Commarcial manager",
                            HireDate = new DateTime(2022, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HireStatus = "Confirm",
                            JobLocation = "Chittagong",
                            Name = "Hanif",
                            PaymentType = "Monthly",
                            Status = "Active",
                            WorkingType = "Full Time"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Leave", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApplyingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("DaysOfLeave")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LeaveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LeaveTo")
                        .HasColumnType("datetime2");

                    b.Property<int>("LeaveTypeId")
                        .HasColumnType("int");

                    b.Property<string>("PlaceDuringLeave")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ReasonForLeave")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("LeaveTypeId");

                    b.ToTable("Leaves");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.LeaveType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("LeaveType");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Annual Leave"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sick Leave"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Casual Leave"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Leave Without Pay"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Maternity Leave"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Paternity Leave"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Bereavement Leave"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Public Holiday"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Absent"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Other"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Onboarding", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DocumentsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("OnboardingEndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("OnboardingStartDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TrainingCompleted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Onboardings");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Payroll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("GrossSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("NetSalary")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAdvanceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalAllowanceAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalBenefitAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOverTimeAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalOverTimeHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPresentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPresentHours")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.ToTable("Payrolls");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.PerformanceReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Feedback")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReviewDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("PerformanceReviews");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmployeeId = 1,
                            Feedback = "Excellent",
                            ReviewDate = new DateTime(2024, 12, 25, 11, 40, 50, 46, DateTimeKind.Local).AddTicks(4040),
                            Score = 5
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.PortalAccess", b =>
                {
                    b.Property<int>("PortalAccessID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PortalAccessID"));

                    b.Property<string>("AccessLevel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeID")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PortalAccessID");

                    b.HasIndex("EmployeeID");

                    b.ToTable("PortalAccesses");

                    b.HasData(
                        new
                        {
                            PortalAccessID = 1,
                            AccessLevel = "Employee",
                            EmployeeID = 1,
                            LastLoginDate = new DateTime(2024, 12, 25, 11, 40, 50, 46, DateTimeKind.Local).AddTicks(5280),
                            Password = "password123",
                            Username = "john.doe"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Resignation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Resignation");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TalentAcquisition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CandidateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("InterviewDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("TalentAcquisitions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ApplicationDate = new DateTime(2024, 10, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(5363),
                            CandidateName = "John Doe",
                            Department = "IT",
                            InterviewDate = new DateTime(2024, 11, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(5391),
                            Position = "Software Engineer",
                            Status = "Hired"
                        },
                        new
                        {
                            Id = 2,
                            ApplicationDate = new DateTime(2024, 9, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(5395),
                            CandidateName = "Jane Smith",
                            Department = "Operations",
                            InterviewDate = new DateTime(2024, 10, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(5397),
                            Position = "Project Manager",
                            Status = "Offered"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TimeTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("TimeOff")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("WorkHours")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("TimeTrackings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CheckInTime = new DateTime(2024, 12, 25, 3, 40, 50, 54, DateTimeKind.Local).AddTicks(6872),
                            CheckOutTime = new DateTime(2024, 12, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(6896),
                            EmployeeId = 1,
                            TimeOff = false,
                            WorkHours = new TimeSpan(0, 8, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Training", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Certificate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TrainingStartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Trainings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Certificate = "Certified",
                            CompletionDate = new DateTime(2025, 1, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(8019),
                            CourseName = "Leadership",
                            EmployeeId = 1,
                            TrainingStartDate = new DateTime(2024, 12, 25, 11, 40, 50, 54, DateTimeKind.Local).AddTicks(8014)
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TrainingSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Completed")
                        .HasColumnType("bit");

                    b.Property<int?>("OnboardingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("comments")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OnboardingId");

                    b.ToTable("TrainingSession");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.CostTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TransactionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("CostTransactions");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.CostType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CostTypes");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionCost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("CostAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionCosts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AssignedToId")
                        .HasColumnType("int");

                    b.Property<int>("BranchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<decimal>("DirectLaborCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("InitialProductCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("InitiatorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastDateOfUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderPriorityId")
                        .HasColumnType("int");

                    b.Property<decimal>("OtherInitialCosts")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("ProductionEndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductionOrderNo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ProductionStartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("PurchaseCost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssignedToId");

                    b.HasIndex("BranchId");

                    b.HasIndex("InitiatorId");

                    b.HasIndex("OrderPriorityId");

                    b.ToTable("ProductionOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionOrderItem", b =>
                {
                    b.Property<int>("ProductionOrderItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductionOrderItemId"));

                    b.Property<int>("ApprovalStatusId")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPerUnit")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSubmitted")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("QuantityProduced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityRequested")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasDefaultValue("Pending");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("ProductionOrderItemId");

                    b.HasIndex("ApprovalStatusId");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductionOrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductionOrderItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionPriority", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("ProductionPriority");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Low"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Medium"
                        },
                        new
                        {
                            Id = 3,
                            Name = "High"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Critical"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("BatchNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StockDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StockLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("ProductionStock");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionStockItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Production")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionStockId")
                        .HasColumnType("int");

                    b.Property<string>("QualityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("QuantityInProduced")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("QuantityInStock")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockType")
                        .HasColumnType("int");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionStockId");

                    b.HasIndex("UnitId");

                    b.ToTable("ProductionStockItem");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ApprovedByEmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("ApprovedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<int>("CreatedEmplyeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ProductionOrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ProductionOrderId");

                    b.ToTable("BillOfMaterials");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterialItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BillOfMaterialsId")
                        .HasColumnType("int");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitCost")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("BillOfMaterialsId");

                    b.ToTable("BillOfMaterialItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.DemandPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ForecastDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ForecastedDemand")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("DemandPlannings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ForecastDate = new DateTime(2024, 12, 25, 5, 40, 50, 28, DateTimeKind.Utc).AddTicks(6841),
                            ForecastedDemand = 1000,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            ForecastDate = new DateTime(2024, 12, 25, 5, 40, 50, 28, DateTimeKind.Utc).AddTicks(6846),
                            ForecastedDemand = 500,
                            ProductId = 2
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.MaterialsRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductionPlanningId")
                        .HasColumnType("int");

                    b.Property<int>("RequiredQuantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductionPlanningId");

                    b.ToTable("MaterialsRequirements");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("CategoryId");

                    b.Property<int>("CompanyId")
                        .HasColumnType("int")
                        .HasColumnName("CompanyId");

                    b.Property<decimal?>("CostPrice")
                        .HasColumnType("decimal")
                        .HasColumnName("CostPrice");

                    b.Property<string>("DefaultVatPercent")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DefaultVatPercent");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Description");

                    b.Property<bool?>("FixedAsset")
                        .HasColumnType("bit")
                        .HasColumnName("FixedAsset");

                    b.Property<string>("InventoryType")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("InventoryType");

                    b.Property<bool?>("IsConsumable")
                        .HasColumnType("bit")
                        .HasColumnName("IsConsumable");

                    b.Property<bool?>("IsInventoryRequired")
                        .HasColumnType("bit")
                        .HasColumnName("IsInventoryRequired");

                    b.Property<bool?>("IsPurchaseable")
                        .HasColumnType("bit")
                        .HasColumnName("IsPurchaseable");

                    b.Property<bool?>("IsQuantityMeasureable")
                        .HasColumnType("bit")
                        .HasColumnName("IsQuantityMeasureable");

                    b.Property<bool?>("IsSaleable")
                        .HasColumnType("bit")
                        .HasColumnName("IsSaleable");

                    b.Property<decimal?>("MRP")
                        .HasColumnType("decimal")
                        .HasColumnName("MRP");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("PurchasePrice");

                    b.Property<bool?>("RawMaterials")
                        .HasColumnType("bit")
                        .HasColumnName("RawMaterials");

                    b.Property<decimal?>("TradePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("TradePrice");

                    b.Property<int>("UnitId")
                        .HasColumnType("int")
                        .HasColumnName("UnitId");

                    b.Property<int>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("WarehouseId");

                    b.Property<decimal?>("WholesalePrice")
                        .HasColumnType("decimal")
                        .HasColumnName("WholesalePrice");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 90.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Shop angle Garder",
                            FixedAsset = false,
                            InventoryType = "Type1",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 120.00m,
                            Name = "Shop angle Garder",
                            PurchasePrice = 100.00m,
                            RawMaterials = true,
                            TradePrice = 105.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 110.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of SS Wire",
                            FixedAsset = false,
                            InventoryType = "Type2",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "SS Wire",
                            PurchasePrice = 50.00m,
                            RawMaterials = true,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 22.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of Gateball Butterfly",
                            FixedAsset = false,
                            InventoryType = "Type3",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 30.00m,
                            Name = "Gateball Butterfly",
                            PurchasePrice = 25.00m,
                            RawMaterials = true,
                            TradePrice = 27.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 28.00m
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 180.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Bate Ball+Butter fly",
                            FixedAsset = false,
                            InventoryType = "Type4",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 230.00m,
                            Name = "Bate Ball+Butter fly",
                            PurchasePrice = 200.00m,
                            RawMaterials = true,
                            TradePrice = 205.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 210.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 135.00m,
                            DefaultVatPercent = "8%",
                            Description = "Description of Gate bulb and Butterfly",
                            FixedAsset = false,
                            InventoryType = "Type5",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 175.00m,
                            Name = "Gate bulb and Butterfly",
                            PurchasePrice = 150.00m,
                            RawMaterials = true,
                            TradePrice = 155.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 160.00m
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 75.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of Cold Store",
                            FixedAsset = false,
                            InventoryType = "Type6",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 90.00m,
                            Name = "Cold Store",
                            PurchasePrice = 80.00m,
                            RawMaterials = true,
                            TradePrice = 82.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 85.00m
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 110.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of SS Coil Pipe",
                            FixedAsset = false,
                            InventoryType = "Type7",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 135.00m,
                            Name = "SS Coil Pipe",
                            PurchasePrice = 120.00m,
                            RawMaterials = true,
                            TradePrice = 122.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 125.00m
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 230.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of SS Coil Nojel Pipe",
                            FixedAsset = false,
                            InventoryType = "Type8",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 275.00m,
                            Name = "SS Coil Nojel Pipe",
                            PurchasePrice = 250.00m,
                            RawMaterials = true,
                            TradePrice = 255.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 260.00m
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 115.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of SS Pipe",
                            FixedAsset = false,
                            InventoryType = "Type9",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 150.00m,
                            Name = "SS Pipe",
                            PurchasePrice = 130.00m,
                            RawMaterials = true,
                            TradePrice = 135.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 140.00m
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 275.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Varieties Scrap",
                            FixedAsset = false,
                            InventoryType = "Type10",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 320.00m,
                            Name = "Varieties Scrap",
                            PurchasePrice = 300.00m,
                            RawMaterials = true,
                            TradePrice = 305.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 310.00m
                        },
                        new
                        {
                            Id = 11,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 160.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Joint Scrap",
                            FixedAsset = false,
                            InventoryType = "Type11",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 200.00m,
                            Name = "Joint Scrap",
                            PurchasePrice = 180.00m,
                            RawMaterials = true,
                            TradePrice = 185.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 190.00m
                        },
                        new
                        {
                            Id = 12,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 380.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of MS Net",
                            FixedAsset = false,
                            InventoryType = "Type12",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 420.00m,
                            Name = "MS Net",
                            PurchasePrice = 400.00m,
                            RawMaterials = true,
                            TradePrice = 405.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 410.00m
                        },
                        new
                        {
                            Id = 13,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 480.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of Kitchen Room",
                            FixedAsset = false,
                            InventoryType = "Type13",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 525.00m,
                            Name = "Kitchen Room",
                            PurchasePrice = 500.00m,
                            RawMaterials = true,
                            TradePrice = 505.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 510.00m
                        },
                        new
                        {
                            Id = 14,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 575.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of Hidrolik Pump (Alumonium Body)",
                            FixedAsset = false,
                            InventoryType = "Type14",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 630.00m,
                            Name = "Hidrolik Pump (Alumonium Body)",
                            PurchasePrice = 600.00m,
                            RawMaterials = true,
                            TradePrice = 610.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 615.00m
                        },
                        new
                        {
                            Id = 15,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Bit Garder",
                            FixedAsset = false,
                            InventoryType = "Type15",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "Bit Garder",
                            PurchasePrice = 50.00m,
                            RawMaterials = false,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        },
                        new
                        {
                            Id = 16,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 140.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Relling",
                            FixedAsset = false,
                            InventoryType = "Type16",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 170.00m,
                            Name = "Relling",
                            PurchasePrice = 150.00m,
                            RawMaterials = false,
                            TradePrice = 155.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 160.00m
                        },
                        new
                        {
                            Id = 17,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 85.00m,
                            DefaultVatPercent = "8%",
                            Description = "Description of Roller",
                            FixedAsset = false,
                            InventoryType = "Type17",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 100.00m,
                            Name = "Roller",
                            PurchasePrice = 90.00m,
                            RawMaterials = false,
                            TradePrice = 92.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 95.00m
                        },
                        new
                        {
                            Id = 18,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 165.00m,
                            DefaultVatPercent = "8%",
                            Description = "Description of Roller Garda",
                            FixedAsset = false,
                            InventoryType = "Type18",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 200.00m,
                            Name = "Roller Garda",
                            PurchasePrice = 180.00m,
                            RawMaterials = false,
                            TradePrice = 185.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 190.00m
                        },
                        new
                        {
                            Id = 19,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "5%",
                            Description = "Description of Star pump",
                            FixedAsset = false,
                            InventoryType = "Type19",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "Star pump",
                            PurchasePrice = 50.00m,
                            RawMaterials = false,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        },
                        new
                        {
                            Id = 20,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 180.00m,
                            DefaultVatPercent = "7%",
                            Description = "Description of Mach Iron",
                            FixedAsset = false,
                            InventoryType = "Type20",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 220.00m,
                            Name = "Mach Iron",
                            PurchasePrice = 200.00m,
                            RawMaterials = false,
                            TradePrice = 205.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 210.00m
                        },
                        new
                        {
                            Id = 21,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 230.00m,
                            DefaultVatPercent = "8%",
                            Description = "Description of Aluminium Stair",
                            FixedAsset = false,
                            InventoryType = "Type21",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 270.00m,
                            Name = "Aluminium Stair",
                            PurchasePrice = 250.00m,
                            RawMaterials = false,
                            TradePrice = 255.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 260.00m
                        },
                        new
                        {
                            Id = 22,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 110.00m,
                            DefaultVatPercent = "6%",
                            Description = "Description of Brass Cornecer Radioter",
                            FixedAsset = false,
                            InventoryType = "Type22",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 130.00m,
                            Name = "Brass Cornecer Radioter",
                            PurchasePrice = 120.00m,
                            RawMaterials = false,
                            TradePrice = 122.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 125.00m
                        },
                        new
                        {
                            Id = 23,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Cast Iron",
                            FixedAsset = false,
                            InventoryType = "Type23",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "Cast Iron",
                            PurchasePrice = 50.00m,
                            RawMaterials = false,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        },
                        new
                        {
                            Id = 24,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 140.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Navi Item",
                            FixedAsset = false,
                            InventoryType = "Type24",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 170.00m,
                            Name = "Navi Item",
                            PurchasePrice = 150.00m,
                            RawMaterials = false,
                            TradePrice = 155.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 160.00m
                        },
                        new
                        {
                            Id = 25,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 170.00m,
                            DefaultVatPercent = "5%",
                            Description = "Description of Furniture",
                            FixedAsset = false,
                            InventoryType = "Type25",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 200.00m,
                            Name = "Furniture",
                            PurchasePrice = 180.00m,
                            RawMaterials = false,
                            TradePrice = 185.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 190.00m
                        },
                        new
                        {
                            Id = 26,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 90.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of General Store",
                            FixedAsset = false,
                            InventoryType = "Type26",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 120.00m,
                            Name = "General Store",
                            PurchasePrice = 100.00m,
                            RawMaterials = false,
                            TradePrice = 105.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 110.00m
                        },
                        new
                        {
                            Id = 27,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 275.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of MS Konakata",
                            FixedAsset = false,
                            InventoryType = "Type27",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 320.00m,
                            Name = "MS Konakata",
                            PurchasePrice = 300.00m,
                            RawMaterials = false,
                            TradePrice = 305.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 310.00m
                        },
                        new
                        {
                            Id = 28,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 375.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of MS Plance",
                            FixedAsset = false,
                            InventoryType = "Type28",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 420.00m,
                            Name = "MS Plance",
                            PurchasePrice = 400.00m,
                            RawMaterials = false,
                            TradePrice = 405.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 410.00m
                        },
                        new
                        {
                            Id = 29,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 90.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Shop angle Garder",
                            FixedAsset = false,
                            InventoryType = "Type1",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 120.00m,
                            Name = "Shop angle Garder",
                            PurchasePrice = 100.00m,
                            RawMaterials = true,
                            TradePrice = 105.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 110.00m
                        },
                        new
                        {
                            Id = 30,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of SS Wire",
                            FixedAsset = false,
                            InventoryType = "Type2",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "SS Wire",
                            PurchasePrice = 50.00m,
                            RawMaterials = true,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        },
                        new
                        {
                            Id = 31,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 22.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of Socket",
                            FixedAsset = false,
                            InventoryType = "Type3",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 30.00m,
                            Name = "Socket",
                            PurchasePrice = 25.00m,
                            RawMaterials = false,
                            TradePrice = 27.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 28.00m
                        },
                        new
                        {
                            Id = 32,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 180.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of 5.8 Shop plate",
                            FixedAsset = false,
                            InventoryType = "Type4",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 230.00m,
                            Name = "5.8 Shop plate",
                            PurchasePrice = 200.00m,
                            RawMaterials = false,
                            TradePrice = 205.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 210.00m
                        },
                        new
                        {
                            Id = 33,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 135.00m,
                            DefaultVatPercent = "8%",
                            Description = "Description of Shop bit garder",
                            FixedAsset = false,
                            InventoryType = "Type5",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 175.00m,
                            Name = "Shop bit garder",
                            PurchasePrice = 150.00m,
                            RawMaterials = false,
                            TradePrice = 155.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 160.00m
                        },
                        new
                        {
                            Id = 34,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 75.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of Cable",
                            FixedAsset = false,
                            InventoryType = "Type6",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 90.00m,
                            Name = "Cable",
                            PurchasePrice = 80.00m,
                            RawMaterials = false,
                            TradePrice = 82.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 85.00m
                        },
                        new
                        {
                            Id = 35,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 110.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Shopping bit. Garder",
                            FixedAsset = false,
                            InventoryType = "Type7",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 135.00m,
                            Name = "Shopping bit. Garder",
                            PurchasePrice = 120.00m,
                            RawMaterials = false,
                            TradePrice = 122.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 125.00m
                        },
                        new
                        {
                            Id = 36,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 230.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of 3.8 Plate Shop",
                            FixedAsset = false,
                            InventoryType = "Type8",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 275.00m,
                            Name = "3.8 Plate Shop",
                            PurchasePrice = 250.00m,
                            RawMaterials = false,
                            TradePrice = 255.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 260.00m
                        },
                        new
                        {
                            Id = 37,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 115.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of Blour",
                            FixedAsset = false,
                            InventoryType = "Type9",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 150.00m,
                            Name = "Blour",
                            PurchasePrice = 130.00m,
                            RawMaterials = false,
                            TradePrice = 135.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 140.00m
                        },
                        new
                        {
                            Id = 38,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 275.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of 1.2 Shop Plate",
                            FixedAsset = false,
                            InventoryType = "Type10",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 320.00m,
                            Name = "1.2 Shop Plate",
                            PurchasePrice = 300.00m,
                            RawMaterials = false,
                            TradePrice = 305.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 310.00m
                        },
                        new
                        {
                            Id = 39,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 160.00m,
                            DefaultVatPercent = "10%",
                            Description = "Description of Ang+bit Gard",
                            FixedAsset = false,
                            InventoryType = "Type11",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 200.00m,
                            Name = "Ang+bit Gard",
                            PurchasePrice = 180.00m,
                            RawMaterials = false,
                            TradePrice = 185.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 190.00m
                        },
                        new
                        {
                            Id = 40,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 380.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of Electronics Item",
                            FixedAsset = false,
                            InventoryType = "Type12",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 420.00m,
                            Name = "Electronics Item",
                            PurchasePrice = 400.00m,
                            RawMaterials = false,
                            TradePrice = 405.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 410.00m
                        },
                        new
                        {
                            Id = 41,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 480.00m,
                            DefaultVatPercent = "18%",
                            Description = "Description of Motor",
                            FixedAsset = false,
                            InventoryType = "Type13",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 525.00m,
                            Name = "Motor",
                            PurchasePrice = 500.00m,
                            RawMaterials = false,
                            TradePrice = 505.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 510.00m
                        },
                        new
                        {
                            Id = 42,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 575.00m,
                            DefaultVatPercent = "12%",
                            Description = "Description of CanonPCD 320 ofset paper",
                            FixedAsset = false,
                            InventoryType = "Type14",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 630.00m,
                            Name = "CanonPCD 320 ofset paper",
                            PurchasePrice = 600.00m,
                            RawMaterials = false,
                            TradePrice = 610.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 615.00m
                        },
                        new
                        {
                            Id = 43,
                            CategoryId = 1,
                            CompanyId = 1,
                            CostPrice = 45.00m,
                            DefaultVatPercent = "15%",
                            Description = "Description of Gateball Butterfly",
                            FixedAsset = false,
                            InventoryType = "Type15",
                            IsConsumable = false,
                            IsInventoryRequired = true,
                            IsPurchaseable = true,
                            IsQuantityMeasureable = true,
                            IsSaleable = true,
                            MRP = 60.00m,
                            Name = "Gateball Butterfly",
                            PurchasePrice = 50.00m,
                            RawMaterials = false,
                            TradePrice = 52.00m,
                            UnitId = 1,
                            WarehouseId = 1,
                            WholesalePrice = 55.00m
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.ProductionPlanning", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("PlannedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PlannedProductionQuantity")
                        .HasColumnType("int");

                    b.Property<int>("StockLevelId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StockLevelId");

                    b.ToTable("ProductionPlannings");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ItemStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("PurchaseOrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UnitId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("PurchaseOrderId");

                    b.HasIndex("UnitId");

                    b.ToTable("PurchaseItems", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ApprovalDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApprovedBy")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("DeliveryInstructions")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpectedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PurchaseOrderNo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ShippingMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalCostAmount")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VendorId");

                    b.ToTable("PurchaseOrders", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.StockLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AvailableQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("DemandPlanningId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DemandPlanningId");

                    b.HasIndex("ProductId");

                    b.ToTable("StockLevels");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Unit");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "KG"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Lot"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Vendor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vendors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "123 Main St",
                            ContactNumber = "1234567890",
                            Name = "Vendor1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "456 Second St",
                            ContactNumber = "0987654321",
                            Name = "Vendor2"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Warehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CompanyId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Warehouses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Location = "Location A",
                            WarehouseName = "Warehouse A"
                        },
                        new
                        {
                            Id = 2,
                            Location = "Location B",
                            WarehouseName = "Warehouse B"
                        },
                        new
                        {
                            Id = 3,
                            Location = "Location C",
                            WarehouseName = "Warehouse C"
                        },
                        new
                        {
                            Id = 4,
                            Location = "Location D",
                            WarehouseName = "Warehouse D"
                        },
                        new
                        {
                            Id = 5,
                            Location = "Location E",
                            WarehouseName = "Warehouse E"
                        },
                        new
                        {
                            Id = 6,
                            Location = "Location F",
                            WarehouseName = "Warehouse F"
                        },
                        new
                        {
                            Id = 7,
                            Location = "Location G",
                            WarehouseName = "Warehouse G"
                        },
                        new
                        {
                            Id = 8,
                            Location = "Location H",
                            WarehouseName = "Warehouse H"
                        },
                        new
                        {
                            Id = 9,
                            Location = "Location I",
                            WarehouseName = "Warehouse I"
                        },
                        new
                        {
                            Id = 10,
                            Location = "Location J",
                            WarehouseName = "Warehouse J"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceAfter")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("BalanceBefore")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid>("BankAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.OnlineUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ExpirationTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("OnlineUsers", (string)null);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2032),
                            ModifiedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2034),
                            RoleDescription = "Administrator with full access to system",
                            RoleName = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2037),
                            ModifiedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2038),
                            RoleDescription = "Manager with access to oversee operations",
                            RoleName = "Manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2040),
                            ModifiedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2040),
                            RoleDescription = "Regular user with limited access",
                            RoleName = "User"
                        },
                        new
                        {
                            Id = 4,
                            CreatedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2042),
                            ModifiedDate = new DateTime(2024, 12, 25, 5, 40, 50, 59, DateTimeKind.Utc).AddTicks(2043),
                            RoleDescription = "Guest user with read-only access",
                            RoleName = "Guest"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("TokenCreated")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "1234",
                            PasswordHash = new byte[0],
                            PasswordSalt = new byte[0],
                            RefreshToken = "sample_refresh_token",
                            TokenCreated = new DateTime(2024, 12, 25, 5, 40, 50, 58, DateTimeKind.Utc).AddTicks(9152),
                            TokenExpires = new DateTime(2025, 1, 1, 5, 40, 50, 58, DateTimeKind.Utc).AddTicks(9155),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            RoleId = 1
                        });
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.Payment", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.Reconciliation", "Reconciliation")
                        .WithMany("Payments")
                        .HasForeignKey("ReconciliationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.VendorInvoice", "VendorInvoice")
                        .WithMany("Payments")
                        .HasForeignKey("VendorInvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reconciliation");

                    b.Navigation("VendorInvoice");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.VendorInvoice", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseOrder", "PurchaseOrder")
                        .WithMany("VendorInvoices")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PurchaseOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.CreditMemo", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.Customer", "Customer")
                        .WithMany("CreditMemos")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", "Invoice")
                        .WithMany("CreditMemos")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.PaymentReceipt", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", "Invoice")
                        .WithMany("paymentReceipts")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrder", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", "Invoice")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", "SalesOrder")
                        .WithMany("DeliveryOrders")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrderItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrder", "DeliveryOrder")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("DeliveryOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", "OrderItem")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", "Status")
                        .WithMany("DeliveryOrderItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryOrder");

                    b.Navigation("OrderItem");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatchItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatcheOrder", "DispatchOrder")
                        .WithMany("DispatchItems")
                        .HasForeignKey("DispatchOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", "OrderItem")
                        .WithMany("DispatchItems")
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", "Status")
                        .WithMany("DispatchItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DispatchOrder");

                    b.Navigation("OrderItem");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatcheOrder", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrder", "DeliveryOrder")
                        .WithMany("DispatcheOrders")
                        .HasForeignKey("DeliveryOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", "Invoice")
                        .WithMany("DispatcheOrders")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", "SalesOrder")
                        .WithMany("DispatcheOrders")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DeliveryOrder");

                    b.Navigation("Invoice");

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", "SalesOrder")
                        .WithMany("Invoices")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("SalesOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.InvoiceItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", "Invoice")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", "Status")
                        .WithMany("InvoiceItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Invoice");

                    b.Navigation("OrderItem");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", "SalesOrder")
                        .WithMany("OrderItems")
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", "Status")
                        .WithMany("OrderItems")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", "Unit")
                        .WithMany("OrderItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("SalesOrder");

                    b.Navigation("Status");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.Customer", "Customer")
                        .WithMany("SalesOrders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrderStatus", "SalesOrderStatus")
                        .WithMany("SalesOrders")
                        .HasForeignKey("SalesOrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("SalesOrderStatus");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountGroup", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountType", "AccountType")
                        .WithMany("AccountGroups")
                        .HasForeignKey("AccountTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Branch", "Branch")
                        .WithMany("AccountGroups")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Company", "Company")
                        .WithMany("AccountGroups")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountType");

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntry", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.Branch", "Branch")
                        .WithMany("JournalEntries")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Company", "Company")
                        .WithMany("JournalEntries")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntryLine", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountGroup", "AccountGroup")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntry", "JournalEntry")
                        .WithMany("JournalEntryLines")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountGroup");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.LedgerPosting", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountGroup", "AccountGroup")
                        .WithMany("LedgerPostings")
                        .HasForeignKey("AccountGroupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccountGroup");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.TrialBalanceLine", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.TrialBalance", null)
                        .WithMany("TrialBalanceLines")
                        .HasForeignKey("TrialBalanceAsOfDate")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.Comment", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.BlogsDomain.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Post");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.Post", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.BlogsDomain.BlogCategory", "Category")
                        .WithMany("Posts")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Branch", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.Company", "Company")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.AdvancePayment", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Payroll", "Payroll")
                        .WithMany("AdvancePayments")
                        .HasForeignKey("PayrollId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Payroll");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Attendance", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.LeaveType", "LeaveType")
                        .WithMany("Attendances")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Payroll", null)
                        .WithMany("Attendances")
                        .HasForeignKey("PayrollId");

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Benefits.Allowances", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Benefits.Benefit", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Employee", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Department", "Department")
                        .WithMany("Employees")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.TalentAcquisition", null)
                        .WithMany("Employees")
                        .HasForeignKey("TalentAcquisitionId");

                    b.Navigation("Branch");

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Leave", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("LeaveType");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Onboarding", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Payroll", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithOne("Payroll")
                        .HasForeignKey("AenEnterprise.DomainModel.HumanResources.Payroll", "EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.PerformanceReview", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.PortalAccess", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Resignation", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany("Resignations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TimeTracking", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Training", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TrainingSession", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Onboarding", null)
                        .WithMany("TrainingSessions")
                        .HasForeignKey("OnboardingId");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.CostTransaction", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", "ProductionOrder")
                        .WithMany("CostTransactions")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionCost", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", "ProductionOrder")
                        .WithMany("ProudctionCost")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "AssignedTo")
                        .WithMany()
                        .HasForeignKey("AssignedToId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Branch", "Branch")
                        .WithMany("ProductionOrders")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Initiator")
                        .WithMany()
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionPriority", "OrderPriority")
                        .WithMany()
                        .HasForeignKey("OrderPriorityId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AssignedTo");

                    b.Navigation("Branch");

                    b.Navigation("Initiator");

                    b.Navigation("OrderPriority");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionOrderItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", "ApprovalStatus")
                        .WithMany("ProductionOrderItems")
                        .HasForeignKey("ApprovalStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", "Product")
                        .WithMany("ProductionOrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionOrderItems")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", "Unit")
                        .WithMany("ProductionOrderItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovalStatus");

                    b.Navigation("Product");

                    b.Navigation("ProductionOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionStock", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", "ProductionOrder")
                        .WithMany("ProductionStocks")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionStockItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionStock", "ProductionStock")
                        .WithMany("ProductionStockItems")
                        .HasForeignKey("ProductionStockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", "Unit")
                        .WithMany("ProductionStockItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionStock");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterial", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.HumanResources.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", "ProductionOrder")
                        .WithMany("BillOfMaterials")
                        .HasForeignKey("ProductionOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("ProductionOrder");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterialItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterial", "BillOfMaterial")
                        .WithMany("BillOfMaterialItems")
                        .HasForeignKey("BillOfMaterialsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BillOfMaterial");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.DemandPlanning", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", "Product")
                        .WithMany("DemandPlannings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.MaterialsRequirement", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.ProductionPlanning", "ProductionPlanning")
                        .WithMany("MaterialsRequirements")
                        .HasForeignKey("ProductionPlanningId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductionPlanning");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.Category", "Categories")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.Company", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Warehouse", "Warehouse")
                        .WithMany()
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categories");

                    b.Navigation("Company");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.ProductionPlanning", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.StockLevel", "StockLevel")
                        .WithMany("ProductionPlans")
                        .HasForeignKey("StockLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockLevel");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseItem", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", "Product")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseOrder", "PurchaseOrder")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", "Unit")
                        .WithMany("PurchaseItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("PurchaseOrder");

                    b.Navigation("Unit");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseOrder", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Vendor", null)
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("VendorId");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.StockLevel", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.DemandPlanning", "DemandPlanning")
                        .WithMany("StockLevels")
                        .HasForeignKey("DemandPlanningId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", "Product")
                        .WithMany("StockLevels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DemandPlanning");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Warehouse", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.Company", null)
                        .WithMany("Warehouses")
                        .HasForeignKey("CompanyId");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Transaction", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.BankAccount", "BankAccount")
                        .WithMany("Transactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.UserRole", b =>
                {
                    b.HasOne("AenEnterprise.DomainModel.UserDomain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AenEnterprise.DomainModel.UserDomain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.Reconciliation", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountPayable.VendorInvoice", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.Customer", b =>
                {
                    b.Navigation("CreditMemos");

                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DeliveryOrder", b =>
                {
                    b.Navigation("DeliveryOrderItems");

                    b.Navigation("DispatcheOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.DispatcheOrder", b =>
                {
                    b.Navigation("DispatchItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Invoice", b =>
                {
                    b.Navigation("CreditMemos");

                    b.Navigation("DeliveryOrders");

                    b.Navigation("DispatcheOrders");

                    b.Navigation("InvoiceItems");

                    b.Navigation("paymentReceipts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.OrderItem", b =>
                {
                    b.Navigation("DeliveryOrderItems");

                    b.Navigation("DispatchItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrder", b =>
                {
                    b.Navigation("DeliveryOrders");

                    b.Navigation("DispatcheOrders");

                    b.Navigation("Invoices");

                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.SalesOrderStatus", b =>
                {
                    b.Navigation("SalesOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.AccountReceivable.SalesManagement.Status", b =>
                {
                    b.Navigation("DeliveryOrderItems");

                    b.Navigation("DispatchItems");

                    b.Navigation("InvoiceItems");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductionOrderItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountGroup", b =>
                {
                    b.Navigation("JournalEntryLines");

                    b.Navigation("LedgerPostings");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.AccountType", b =>
                {
                    b.Navigation("AccountGroups");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.JournalEntry", b =>
                {
                    b.Navigation("JournalEntryLines");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.AccountsAndFinance.GeneralLedger.TrialBalance", b =>
                {
                    b.Navigation("TrialBalanceLines");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BankAccount", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.BlogCategory", b =>
                {
                    b.Navigation("Posts");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.BlogsDomain.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Branch", b =>
                {
                    b.Navigation("AccountGroups");

                    b.Navigation("JournalEntries");

                    b.Navigation("ProductionOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.Company", b =>
                {
                    b.Navigation("AccountGroups");

                    b.Navigation("Branches");

                    b.Navigation("JournalEntries");

                    b.Navigation("Products");

                    b.Navigation("Warehouses");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Department", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Payroll")
                        .IsRequired();

                    b.Navigation("Resignations");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.LeaveType", b =>
                {
                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Onboarding", b =>
                {
                    b.Navigation("TrainingSessions");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.Payroll", b =>
                {
                    b.Navigation("AdvancePayments");

                    b.Navigation("Attendances");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.HumanResources.TalentAcquisition", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionOrder", b =>
                {
                    b.Navigation("BillOfMaterials");

                    b.Navigation("CostTransactions");

                    b.Navigation("ProductionOrderItems");

                    b.Navigation("ProductionStocks");

                    b.Navigation("ProudctionCost");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.InventoryManagement.ProductionStock", b =>
                {
                    b.Navigation("ProductionStockItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.BillOfMaterial", b =>
                {
                    b.Navigation("BillOfMaterialItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.DemandPlanning", b =>
                {
                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Product", b =>
                {
                    b.Navigation("DemandPlannings");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductionOrderItems");

                    b.Navigation("PurchaseItems");

                    b.Navigation("StockLevels");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.ProductionPlanning", b =>
                {
                    b.Navigation("MaterialsRequirements");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.PurchaseOrder", b =>
                {
                    b.Navigation("PurchaseItems");

                    b.Navigation("VendorInvoices");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.StockLevel", b =>
                {
                    b.Navigation("ProductionPlans");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Unit", b =>
                {
                    b.Navigation("OrderItems");

                    b.Navigation("ProductionOrderItems");

                    b.Navigation("ProductionStockItems");

                    b.Navigation("PurchaseItems");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.SupplyAndChainManagement.Vendor", b =>
                {
                    b.Navigation("PurchaseOrders");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("AenEnterprise.DomainModel.UserDomain.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
