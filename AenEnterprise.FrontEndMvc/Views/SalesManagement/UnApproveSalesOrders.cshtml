@{
    ViewData["Title"] = "UnApproveSalesOrders";
    Layout = "~/Views/Shared/AdminPanel_Layout.cshtml";
}

<script>

     
    $(document).ready(function () {
        $("#checkedAll").change(function () {
            $(".checkSingle").prop("checked", this.checked);
        });
        $(".checkSingle").click(function () {
            $("#checkedAll").prop("checked", $(".checkSingle:checked").length === $(".checkSingle").length);
        });
        setDefaultDates();
        getSalesOrders(1, 10);

         // Event listener for page selection
        $("#pageSelect").on("change", function () {
            var selectedPage = $(this).val(); // Get selected page number
            var pageSize = 10; // Set the desired page size
            getSalesOrders(parseInt(selectedPage), pageSize)
            
        });
    });

    function resetFilters() {
        // Reset date inputs
        document.getElementById('dateFromInput').value = '';
        document.getElementById('dateToInput').value = '';

        // Reset search criteria
        document.getElementById('txtCriteriaName').value = '';
        setDefaultDates();
        getSalesOrders(1, 6);
    }

    async function getSalesOrders(pageNumber, pageSize) {
        // Show loading indicator
        $("#loadingIndicator").show();

        // Start tracking time
        const startTime = new Date();

        const dateFromInput = new Date(document.getElementById('dateFromInput').value).toISOString();
        const dateToInput = new Date(document.getElementById('dateToInput').value).toISOString();
        const criteriaName = document.getElementById('txtCriteriaName').value;
        await GetAllSalesOrder(pageNumber, pageSize, dateFromInput, dateToInput, criteriaName, startTime);
    }

    async function GetAllSalesOrder(pageNumber, pageSize, dateFrom, dateTo, criteriaName, startTime) {
        try {
            var jsonData = {
                DateFrom: dateFrom,
                DateTo: dateTo,
                PageNumber: pageNumber,
                PageSize: pageSize,
                CriteriaName: criteriaName
            };
            var url = 'SalesOrder/GetAllUnApprovedSalesOrders';
            var salesResponse = await getAllDataWithParameter(url, jsonData);

            // Display total items found
            $(".totalItemsFound").empty().append(`Items found - ${salesResponse.totalCount} / ${salesResponse.totalPages} Pages`);

            // Compile the Handlebars template
            var source = $("#salesOrdersTemplate").html();
            var template = Handlebars.compile(source);
            var html = template(salesResponse);

            // Inject the generated HTML into the target element
            $("#salesOrderElement").html(html);

            // Set page numbers in select option list
            var $pageSelect = $("#pageSelect");
            $pageSelect.empty(); // Clear any existing options
            for (var i = 1; i <= salesResponse.totalPages; i++) {
                var selected = (i === pageNumber) ? 'selected' : '';
                $pageSelect.append(`<option value="${i}" ${selected}>Page ${i}</option>`);
            }

            // Call the pagination callback
            paginationCallBack(salesResponse.totalPages, pageNumber);
        } catch (error) {
            console.error("Error fetching data from the server: " + error.message);
        } finally {
            // Hide loading indicator
            $("#loadingIndicator").hide();

            // Calculate and show loading time
            const endTime = new Date();
            const loadingTime = ((endTime - startTime) / 1000).toFixed(2); // Convert to seconds
            $(".totalItemsFound").append(` | Loading time: ${loadingTime} seconds`);
        }
    }
    async function ChangeApprovalStatusByChecked() {
        const chkChecked = $("input[name='checkSingle']:checked").length;
        if (chkChecked >= 1) {
            const statusId = $("#ddlStatusId").val();
            const postArr = $("input[name='checkSingle']:checked").map(function () {
                const orderItemId = $(this).val();
                const salesOrderId = $("#salesOrderIdHidden").text().trim();
                return { StatusId: statusId, SalesOrderId: salesOrderId, OrderItemId: orderItemId };
            }).get();

            const url = 'SalesOrder/ApproveOrderItems';
            await postArrayDataWithParameter(url, postArr, () => {
                const currentPage = parseInt($('.page-link.active').text().trim());
                getSalesOrders(currentPage, 6);
            });
        }
    }
   

</script>

<div class="container mt-4">
    <!-- Notification area -->
    <div id="notification-area"></div>

    <!-- Include SignalR library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
        // Step 1: Establish SignalR connection to the hub
        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/notificationHub") // Ensure the route matches backend configuration
            .build();

        // Step 2: Define a listener for "ReceiveNotification"
        connection.on("ReceiveNotification", function (message) {
            const notificationArea = document.getElementById("notification-area");

            // Create a Bootstrap alert dynamically
            const alert = document.createElement("div");
            alert.className = "alert alert-success alert-dismissible fade show";
            alert.role = "alert";
            alert.innerHTML = `
                        <strong>Notification:</strong> ${message}
                        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                    `;

            // Append alert to notification area
            notificationArea.appendChild(alert);

            // Auto-dismiss after 5 seconds
            setTimeout(() => {
                alert.classList.remove("show");
                alert.classList.add("fade");
                setTimeout(() => alert.remove(), 150); // Remove alert from DOM
            }, 5000);
        });

        // Step 3: Start the SignalR connection
        connection.start().catch(err => console.error(err.toString()));
    </script>
</div>
    <!-- Date Range and Search Section -->
    <div class="row mb-3 align-items-end custom-row">
        <div class="col-md-2 col-sm-6 mb-2 mb-md-0">
            <label for="dateFromInput" class="form-label">From Date</label>
            <input type="date" id="dateFromInput" class="form-control" placeholder="From Date">
        </div>
        <div class="col-md-2 col-sm-6 mb-2 mb-md-0">
            <label for="dateToInput" class="form-label">To Date</label>
            <input type="date" id="dateToInput" class="form-control" placeholder="To Date">
        </div>
        <div class="col-md-3 col-sm-8 mb-2 mb-md-0">
            <label for="txtCriteriaName" class="form-label">Search Order Items</label>
            <input type="search" id="txtCriteriaName" class="form-control" placeholder="Search Order Items">
        </div>
        <div class="col-md-2 col-sm-4 text-md-end">
            <button class="btn btn-primary w-100" onclick="Javascript: getSalesOrders(1,6)">
                <i class="fas fa-search"></i> Search
            </button>
        </div>

        <div class="col-md-2 col-sm-4 text-md-end">
            <button class="btn btn-secondary w-100" onclick="resetFilters()">
                <i class="fas fa-undo"></i> Reset
            </button>
        </div>

    </div>
     
    <div class="row mb-3 custom-row">
        <div class="col-10">
            <div class="col-md-3 col-sm-6 d-flex flex-row gap-2" style="float:right">
                <select id="ddlStatusId" class="form-select">
                    <option value="2">Approve</option>
                    <option value="4">Reject</option>
                </select>
                <button class="btn btn-secondary ms-auto" onclick="Javascript:ChangeApprovalStatusByChecked()">
                    Change
                </button>
            </div>
            <div class="totalItemsFound"></div>
        </div>

        <div class="col-1 text-end mt-3 mt-md-0" style="float:right">

            <div class="form-check">
                <input type="checkbox" class="form-check-input dark-checkbox" id="checkedAll">
                <label class="form-check-label" for="checkedAll">All</label>
            </div>
        </div>
        <br>
        <br>
        <hr>
        
        <div id="loadingIndicator" style="display:none; text-align:center; margin-top: 20px;">
            <span>Loading...</span>
            <div class="spinner-border" role="status" aria-hidden="true"></div>
        </div>
        <div id="salesOrderElement"></div>
        <div class="row mt-3">
            <div class="col-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center paging"></ul>
                </nav>
                <select id="pageSelect"></select>
            </div>
        </div>
    </div>


    <script id="salesOrdersTemplate" type="text/x-handlebars-template">
        {{#each salesOrders}}
            <!-- Sales Order Row -->
            <div class="row border-bottom p-2" style="background-color:#f0f0f0; border: 1px solid lightgray;">
                <div class="col-md-2">
                    {{id}}
                    <a href="@Url.Action("GetSalesOrderById", "SalesOrderReport")?salesOrderId={{id}}">
                        {{salesOrderNo}}
                    </a>
                </div>
                <div class="col-md-3">{{customerName}}</div>
                <div class="col-md-3">{{orderDateInFormat}}</div>
                <div class="col-md-4 text-end">
                    <!-- Additional Action Buttons or Info can be placed here -->
                </div>
                <div id="salesOrderIdHidden" style="display:none">{{id}} </div>
            </div>

            <!-- Order Items Container -->
            <div class="orderItems-container">
                 <div class="row orderitem-cell-data-container p-2"  style="font-weight:normal; font:small; color:darkgray; background-color:#ffffff; border: 1px solid lightgray;">
            <div class="col-md-2">Product name</div>
                        <div class="col-md-1">Price</div>
                        <div class="col-md-2">Quantity</div>
                        <div class="col-md-2">Invoiced Quantity</div>
                        <div class="col-md-2">Due Quantity</div>
                        <div class="col-md-2">Amount</div>
                        </div>
                         <div class="col-md-1"></div>
                        
                {{#each orderItems}}
                    <div class="row orderitem-cell-data-container p-2" style="background-color:#ffffff; border: 1px solid lightgray;">
                        <div class="col-md-1" style="display:none">
                            <span id="spnOrderItemid">{{id}}</span>
                        </div>
                        <div class="col-md-2">{{productName}}</div>
                        <div class="col-md-1">{{price}}</div>
                        <div class="col-md-2">{{quantityInFormat}} {{unitName}}</div>
                        <div class="col-md-2">
                        {{#if invoiceQuantityInFormat}}
                            {{invoiceQuantityInFormat}} {{unitName}}
                        {{else}}
                            0 {{unitName}}
                        {{/if}}
                    </div>
                        <div class="col-md-2">{{balanceQuantityInFormat}} {{unitName}}</div>
                        <div class="col-md-2">{{amountInFormat}}</div>
                        <div class="col-md-1">
                            <div class="form-check">
                                <input type="checkbox" name="checkSingle" value="{{id}}" class="form-check-input checkSingle dark-checkbox" id="chkSingle">
                            </div>
                        </div>
                    </div>
                {{/each}}
            </div>
        {{/each}}
    </script>
</div>
