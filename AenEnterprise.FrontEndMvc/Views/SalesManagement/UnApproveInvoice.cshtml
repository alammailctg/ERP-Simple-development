
@{
    ViewData["Title"] = "UnApproveInvoice";

    Layout = "~/Views/Shared/AdminPanel_Layout.cshtml";
}
<script src="~/script/jquery-jtemplates.js"></script>
<h1>UnApproveInvoice</h1>


<script>

    $(document).ready(function () {

        //ifgetSalesOrders will mention top of the setDefaultDates it will show error toISOString();
        setDefaultDates();
        getInvoices(1,6);

        $("#pageSelect").on("change", function () {
            var selectedPage = $(this).val(); // Get selected page number
            var pageSize = 6; // Set the desired page size
            getInvoices(parseInt(selectedPage), pageSize)

        });

        $("#checkedAll").change(function () {
            if (this.checked) {
                $(".checkSingle").each(function () {
                    this.checked = true;
                })
            } else {
                $(".checkSingle").each(function () {
                    this.checked = false;
                })
            }
        });
        $(".checkSingle").click(function () {
            if ($(this).is(":checked")) {
                var isAllChecked = 0;
                $(".checkSingle").each(function () {
                    if (!this.checked)
                        isAllChecked = 1;
                })
                if (isAllChecked == 0) { $("#checkedAll").prop("checked", true); }
            }
            else {
                $("#checkedAll").prop("checked", false);
            }
        });
    });
    function resetFilters() {
        // Reset date inputs
        document.getElementById('dateFromInput').value = '';
        document.getElementById('dateToInput').value = '';

        // Reset search criteria
        document.getElementById('txtCriteriaName').value = '';
        setDefaultDates();
        getInvoices(1, 6);
    }
    async function getInvoices(pageNumber, pageSize) {
        // Show loading indicator
        $("#loadingIndicator").show();

        // Start tracking time
        const startTime = new Date();
        const dateFromInput = new Date(document.getElementById('dateFromInput').value).toISOString();
        const dateToInput = new Date(document.getElementById('dateToInput').value).toISOString();
        const criteriaName = document.getElementById('txtCriteriaName').value;
        await GetAllInvoices(pageNumber, pageSize, dateFromInput, dateToInput, criteriaName, startTime);
    }
    async function GetAllInvoices(pageNumber, pageSize, dateFrom, dateTo, criteriaName, startTime) {
        try {
            var jsonData = {
                DateFrom: dateFrom,
                DateTo: dateTo,
                PageNumber: pageNumber,
                PageSize: pageSize,
                CriteriaName: criteriaName
            }
            var url = 'Invoice/GetAllUnApproveInvoices';
            var invoiceResponse = await getAllDataWithParameter(url, jsonData);
           
            console.log(JSON.stringify(invoiceResponse));
            $(".totalItemsFound").empty();
            var source = $("#salesOrdersTemp").html();
            var template = Handlebars.compile(source);

          
            var html = template(invoiceResponse);
            $(".totalItemsFound").append(`Items found - ${invoiceResponse.totalCount}/${invoiceResponse.totalPages} Pages`);
           
            $("#salesOrderElement").html(html);

            // Set page numbers in select option list
            var $pageSelect = $("#pageSelect");
            $pageSelect.empty(); // Clear any existing options
            for (var i = 1; i <= invoiceResponse.totalPages; i++) {
                var selected = (i === pageNumber) ? 'selected' : '';
                $pageSelect.append(`<option value="${i}" ${selected}>Page ${i}</option>`);
            }
            paginationCallBackForInvoiceList(invoiceResponse.totalPages, pageNumber);

            // Hide loading indicator
            $("#loadingIndicator").hide();

            // Calculate and show loading time
            const endTime = new Date();
            const loadingTime = ((endTime - startTime) / 1000).toFixed(2); // Convert to seconds
            $(".totalItemsFound").append(` | Loading time: ${loadingTime} seconds`);

        } catch (error) {
            console.error("Error fetching data from the server: " + error.message);
        }
       
    }

    async function ChangeApprovalStatusByChecked() {
        var chkChecked = $("input[name='checkSingle']:checked").length;
        if (chkChecked >= 1) {
            var statusId = $("#ddlStatusId").val(); // Retrieve the selected approval ID
            var postArr = [];
            $("input[name='checkSingle']:checked").each(function () {
                var invoiceItemId = $(this).val();

                // Find the closest .salesOrder-item-data and get the InvoiceId
                var invoiceId = $(this).closest(".orderitem-cell-data-container").find("#spnInvoiceId").text();

                var formrequests = {
                    StatusId: statusId,
                    InvoiceId: invoiceId,
                    InvoiceItemId: invoiceItemId
                };
                postArr.push(formrequests);
            });
            try {
                await $.ajax({
                    url: '/api/Invoice/ApproveInvoices',
                    type: 'POST',
                    // dataType: 'json',
                    data: JSON.stringify(postArr),
                    contentType: 'application/json; charset=utf-8',
                    success: async function (data) {
                        console.log(data);
                        const pageSize = 6;
                        const currentPage = parseInt($('.page-link.active').text().trim());
                        getInvoices(currentPage, 6);
                    },
                    error: function (xhr, textStatus, errorThrown) {
                        console.error("Error updating approval status: " + textStatus + " - " + errorThrown);
                        // Handle error response as needed
                    }
                });
            } catch (error) {
                console.error("Error updating approval status: " + error.message);
            }
        } else {
            alert("Please select sales orders to update approval status!");
        }
    }



</script>

 
<div class="container salesOrder-container mt-4">

    <!-- Date Range and Search Section -->
    <div class="row mb-3 align-items-end custom-row">
        <div class="col-md-2 col-sm-6 mb-2 mb-md-0">
            <label for="dateFromInput" class="form-label">From Date</label>
            <input type="date" id="dateFromInput" class="form-control" placeholder="From Date">
        </div>
        <div class="col-md-2 col-sm-6 mb-2 mb-md-0">
            <label for="dateToInput" class="form-label">To Date</label>
            <input type="date" id="dateToInput" class="form-control" placeholder="To Date">
        </div>
        <div class="col-md-3 col-sm-8 mb-2 mb-md-0">
            <label for="txtCriteriaName" class="form-label">Search Order Items</label>
            <input type="search" id="txtCriteriaName" class="form-control" placeholder="Search Order Items">
        </div>
        <div class="col-md-2 col-sm-4 text-md-end">
            <button class="btn btn-primary w-100" onclick="Javascript: getInvoices(1,6)">
                <i class="fas fa-search"></i> Search
            </button>
        </div>

        <div class="col-md-2 col-sm-4 text-md-end">
            <button class="btn btn-secondary w-100" onclick="resetFilters()">
                <i class="fas fa-undo"></i> Reset
            </button>
        </div>

    </div>


    <div class="row mb-3 custom-row">
        <div class="col-10">
            <div class="col-md-3 col-sm-6 d-flex flex-row gap-2" style=" float:right">
                <select id="ddlStatusId" class="form-select">
                    <option value="2">Approve</option>
                    <option value="3">Reject</option>
                </select>
                <button class="btn btn-secondary ms-auto" onclick="Javascript:ChangeApprovalStatusByChecked()">
                    Change
                </button>
            </div>
            <div class="totalItemsFound"></div>
        </div>
        <div class="col-1 text-end mt-3 mt-md-0" style="float:right">
            <div class="form-check">
                <input type="checkbox" class="form-check-input dark-checkbox" id="checkedAll">
                <label class="form-check-label" for="checkedAll">All</label>
            </div>
        </div>
        <br>
        <br>
        <hr>
        <div id="loadingIndicator" style="display:none; text-align:center; margin-top: 20px;">
            <span>Loading...</span>
            <div class="spinner-border" role="status" aria-hidden="true"></div>
        </div>
        <div id="salesOrderElement"></div>
        <div class="row mt-3">
            <div class="col-12">
                <nav aria-label="Page navigation">
                    <ul class="pagination justify-content-center paging"></ul>
                </nav>
                <select id="pageSelect"></select>
            </div>
        </div>
    </div>



    <script id="salesOrdersTemp" type="text/x-handlebars-template">
        {{#each invoices as |record|}}
        <!-- Sales Order Row -->
        <div class="row border-bottom p-2" style="background-color:#f0f0f0; border: 1px solid lightgray;">
            <div class="col-md-2">
                {{record.id}}
                <a href="@Url.Action("GetInvoiceBySalesOrderId", "SalesOrderReport")?InvoiceId={{record.id}}">
                    {{record.invoiceNo}}
                </a>
            </div>
            <div class="col-md-3">{{record.customerName}}</div>
            <div class="col-md-3">{{record.orderDateInFormat}}</div>
            <div class="col-md-4 text-end">
                <!-- Additional Action Buttons or Info can be placed here -->
            </div>
            <div id="salesOrderIdHidden" style="display:none">{{record.id}}</div>
        </div>

        <!-- Order Items Container -->
        <div class="orderItems-container">
            <div class="row orderitem-cell-data-container p-2" style="font-weight:normal; font:small; color:darkgray; background-color:#ffffff; border: 1px solid lightgray;">
                <div class="col-md-2">Product name</div>
                <div class="col-md-1">Price</div>
                <div class="col-md-2">Quantity</div>
                <div class="col-md-2">Invoiced Quantity</div>
                <div class="col-md-2">Due Quantity</div>
                <div class="col-md-2">Amount</div>
            </div>

            {{#each record.invoiceItems as |inv|}}
            <div class="row orderitem-cell-data-container p-2" style="background-color:#ffffff; border: 1px solid lightgray;">
                <div class="col-md-1" style="display:none">
                    <span id="spnInvoiceItemId">{{inv.id}}</span>
                    <span id="spnInvoiceId">{{inv.invoiceId}}</span>
                </div>
                <div class="col-md-2">{{inv.productName}}</div>
                <div class="col-md-1">{{inv.price}}</div>
                <div class="col-md-2">{{inv.invoiceQuantity}} {{inv.unitName}}</div>
                <div class="col-md-2">{{inv.balanceQuantity}} {{inv.unitName}}</div>
                <div class="col-md-2">{{inv.invoiceAmount}}</div>
                <div class="col-md-1">
                    <div class="form-check">
                        <input type="checkbox" name="checkSingle" value="{{inv.id}}" class="checkSingle" id="chkSingle" />
                    </div>
                </div>
            </div>
            {{/each}}
        </div>
        {{/each}}
    </script>

</div>